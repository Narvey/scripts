#!/usr/bin/env python

# Read and print an excel .xls spreadsheet.
# Thanks to http://scienceoss.com/read-excel-files-from-python/

import sys, xlrd

def print_sheet(sheetname, sh):
    # Gnumeric makes null sheets, with 0 rows and 0 columns.
    # Guard against division by zero in gnumeric spreadsheets:
    if not sh or sh.ncols <= 0:
        print("Null sheet", sheetname)
        return

    print("===== sheet", sheetname, ": rows", sh.nrows, "cols", sh.ncols)

    # set a maximum on any one column.
    # Ideally this would be smarter,
    # and would let one long row expand if the rest were shorter.
    maxlen = 80 / sh.ncols

    # Get max len for each col
    maxstr = [1] * sh.ncols
    for rownum in range(sh.nrows):
        for colnum in range(sh.ncols):
            # Figure out how many characters this cell needs.
            val = sh.cell(rownum, colnum).value
            # print("cell is type", type(val))
            # if hasattr(val, 'decode'):
            #     val = val.decode('utf-8')
            # print("Val", val)

            # This gets lots of null strings, so filter them out:
            if not val:
                continue

            #print("type:", type(val), val)
            slen = len(str(val))
            #if slen > maxlen: slen = maxlen
            if slen > maxstr[colnum]:
                maxstr[colnum] = slen

    fmt = ""
    for colnum in range(sh.ncols):
        fmt += "%%-%ds" % (maxstr[colnum] + 1)

    for rownum in range(sh.nrows):
        # Should get the charset from the environment, but it's not clear
        # even that is enough. In practice, this works to stdout without
        # needing the encode, but to pipe through grep or redirect to a
        # file it needs the encode.
        # print((fmt % tuple(map(str,
        #            sh.row_values(rownum)))).encode(sys.getdefaultencoding(),
        #                                            'backslashreplace'))
        print(fmt % tuple(sh.row_values(rownum)))

for filename in sys.argv[1:]:
    wb = xlrd.open_workbook(filename)
    #sh = wb.sheet_by_index(0)
    for sheetname in wb.sheet_names():
        print_sheet(sheetname, wb.sheet_by_name(sheetname))

